//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Gesture"",
            ""id"": ""4121d696-8019-4d1a-9e4a-ed0df8d47b49"",
            ""actions"": [
                {
                    ""name"": ""FingerPressed"",
                    ""type"": ""Value"",
                    ""id"": ""e8b507fe-c639-465d-8e07-6f98fb7bf484"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""377df251-3495-44b1-a74d-4a6fe51aaaca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""40b0e764-a15f-43ff-aea1-1d39dc196476"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""FingerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0681b666-bb10-410a-8654-c59f477e8fd2"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Taps"",
            ""id"": ""284efdc2-b780-4ade-a21a-24c4bbd888b6"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""a9498483-19fc-41ae-9dd9-a99f4f24cd40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""93af5955-4eef-4697-a432-285e83e2ae21"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": []
        }
    ]
}");
        // Gesture
        m_Gesture = asset.FindActionMap("Gesture", throwIfNotFound: true);
        m_Gesture_FingerPressed = m_Gesture.FindAction("FingerPressed", throwIfNotFound: true);
        m_Gesture_Position = m_Gesture.FindAction("Position", throwIfNotFound: true);
        // Taps
        m_Taps = asset.FindActionMap("Taps", throwIfNotFound: true);
        m_Taps_Tap = m_Taps.FindAction("Tap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gesture
    private readonly InputActionMap m_Gesture;
    private List<IGestureActions> m_GestureActionsCallbackInterfaces = new List<IGestureActions>();
    private readonly InputAction m_Gesture_FingerPressed;
    private readonly InputAction m_Gesture_Position;
    public struct GestureActions
    {
        private @InputMaster m_Wrapper;
        public GestureActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @FingerPressed => m_Wrapper.m_Gesture_FingerPressed;
        public InputAction @Position => m_Wrapper.m_Gesture_Position;
        public InputActionMap Get() { return m_Wrapper.m_Gesture; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GestureActions set) { return set.Get(); }
        public void AddCallbacks(IGestureActions instance)
        {
            if (instance == null || m_Wrapper.m_GestureActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GestureActionsCallbackInterfaces.Add(instance);
            @FingerPressed.started += instance.OnFingerPressed;
            @FingerPressed.performed += instance.OnFingerPressed;
            @FingerPressed.canceled += instance.OnFingerPressed;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
        }

        private void UnregisterCallbacks(IGestureActions instance)
        {
            @FingerPressed.started -= instance.OnFingerPressed;
            @FingerPressed.performed -= instance.OnFingerPressed;
            @FingerPressed.canceled -= instance.OnFingerPressed;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
        }

        public void RemoveCallbacks(IGestureActions instance)
        {
            if (m_Wrapper.m_GestureActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGestureActions instance)
        {
            foreach (var item in m_Wrapper.m_GestureActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GestureActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GestureActions @Gesture => new GestureActions(this);

    // Taps
    private readonly InputActionMap m_Taps;
    private List<ITapsActions> m_TapsActionsCallbackInterfaces = new List<ITapsActions>();
    private readonly InputAction m_Taps_Tap;
    public struct TapsActions
    {
        private @InputMaster m_Wrapper;
        public TapsActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Taps_Tap;
        public InputActionMap Get() { return m_Wrapper.m_Taps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TapsActions set) { return set.Get(); }
        public void AddCallbacks(ITapsActions instance)
        {
            if (instance == null || m_Wrapper.m_TapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TapsActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
        }

        private void UnregisterCallbacks(ITapsActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
        }

        public void RemoveCallbacks(ITapsActions instance)
        {
            if (m_Wrapper.m_TapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITapsActions instance)
        {
            foreach (var item in m_Wrapper.m_TapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TapsActions @Taps => new TapsActions(this);
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    public interface IGestureActions
    {
        void OnFingerPressed(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
    public interface ITapsActions
    {
        void OnTap(InputAction.CallbackContext context);
    }
}
